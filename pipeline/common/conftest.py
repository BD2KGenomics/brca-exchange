# shared fixtures
import glob
import os

import bioutils
from bioutils import seqfetcher
import pytest
from mock import patch

from common import seq_utils
from common.hgvs_utils import HgvsWrapper

pwd = os.path.dirname(os.path.realpath(__file__))
data_dir = os.path.join(pwd, '..', 'data')

@pytest.fixture(scope="session")
def hgvs_wrapper():
    return HgvsWrapper()

@pytest.fixture(scope="session")
def fetch_seq_mock_data():
    mock_data = {}

    # mock data was generated by running tests using 'make test' and
    # saving the output of SeqRepoWrapper._fetch_seq into the corresponding files
    for path in glob.glob(os.path.join(data_dir, 'mock_fetch_seq*')):
        with open(path, 'r') as f:
            fn = os.path.basename(path).rstrip('.txt')
            key = tuple(fn.split('-')[-3:]) # ac, start, end
            mock_data[key] = f.readline().strip()

    return mock_data


@pytest.fixture(scope="module")
def seq_fetcher(fetch_seq_mock_data):
    with patch.object(bioutils.seqfetcher, 'fetch_seq',
                          side_effect=lambda ac, s, e: fetch_seq_mock_data[(str(ac), str(s), str(e))]):
        return seq_utils.SeqRepoWrapper.get_instance()



