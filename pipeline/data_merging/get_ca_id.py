import requests
import json
import sys
import argparse
import csv
import time
import pdb

def parse_args():
    parser = argparse.ArgumentParser(description='Gathers ClinGen Allele Registry IDs.')
    parser.add_argument('-i', '--input', type=argparse.FileType('r'),
                        help='Input variants.')
    parser.add_argument('-o', '--output', type=argparse.FileType('w'),
                        help='Output variants.')
    parser.add_argument('-e', '--errors', type=argparse.FileType('w'),
                        help='File containing all variants for which CA_IDs could not be found.')
    options = parser.parse_args()
    return options


def main(args):
    options = parse_args()
    inputFile = options.input
    outputFile = options.output
    errorsFile = options.errors

    input_file = csv.reader(inputFile, delimiter='\t')
    output_file = csv.writer(outputFile, delimiter='\t')
    input_header_row = next(input_file)

    # The following new columns will contain data generated by this file
    new_columns_to_append = ["CA_ID"]

    output_header_row = input_header_row + new_columns_to_append

    output_file.writerow(output_header_row)

    genomic_hgvs_index = input_header_row.index("Genomic_HGVS_38")

    for variant in input_file:
        hgvs = variant[genomic_hgvs_index]

        # Add empty data for each new column to prepare for data insertion by index
        for i in range(len(new_columns_to_append)):
            variant.append('-')

        ca_id = get_ca_id(hgvs, variant)

        variant[output_header_row.index("CA_ID")] = ca_id

        time.sleep(0.1)

        output_file.writerow(variant)


def get_ca_id(hgvs, variant):
    if hgvs == '-' or hgvs == '':
        print('no hgvs provided for variant: %s' % (variant), file=errorsFile)
        print('\n', file=errorsFile)
        return ''
    #http://reg.clinicalgenome.org/allele?hgvs=NC_000013.11:g.32319188A>G
    main_url = 'http://reg.clinicalgenome.org/allele?hgvs='
    query_url = main_url + hgvs
    MAX_TRIES = 5
    tries = 0
    r = None
    while True:
        try:
            res = requests.get(query_url)
        except requests.exceptions.RequestException as e:
            print(e)
            time.sleep(10)
            tries += 1
            if tries >= MAX_TRIES:
                print("Request for hgvs %s failed 5 times, exiting." % (pos))
                sys.exit(1)
            continue
        break
    try:
        return res.json()['@id'].split("allele/", 1)[1]
    except:
        print("Could not parse response: ", sys.exc_info()[0], file=errorsFile)
        print("Response for hgvs: %s" % (hgvs), file=errorsFile)
        print(res.json(), file=errorsFile)
        print('\n', file=errorsFile)

if __name__ == "__main__":
    sys.exit(main(sys.argv))
