#!/usr/bin/env python

from __future__ import print_function, division
import logging, sys, argparse
from collections import defaultdict
from os.path import join, basename, dirname, isfile
import string

def parse_args():
    """
    === COMMAND LINE INTERFACE, OPTIONS AND HELP ===
    """
    parser = argparse.ArgumentParser(description='usage: %prog [options] filename - merge all rows in a VCF file that describe the same variant into one single row and add a AC info field with the total number of merged rows.')
    parser.add_argument('-d', '--debug', default=False, help='show debug messages')
    parser.add_argument('-f', '--file', help='run on file')
    options = parser.parse_args()

    if options.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    return options
      
def main(args):  

    options = parse_args()
    filename = options.file
    fieldNames = []
    fieldDescs = []
    dataHeader = ''
    data = defaultdict(list)
    for line in open(filename):
        if line.startswith("##INFO="):
            fieldDescs.append(line.split('"')[-2])
            fieldNames.append(line.split("=")[2].split(",")[0])
        elif line.startswith("#CHROM"):
            dataHeader = line
        elif line.startswith("#"):
            print(line, end="")
        else:
            fs = line.rstrip("\n").split("\t")
            key = (fs[0], fs[1], fs[3], fs[4])
            data[key].append(fs)

    # Display INFO field in vcf header section containing '|' delimited set of annotation field names
    print("""##INFO=<ID=Field_Names,Number=1,Type=String,Description="{0}">""".format("|".join(fieldNames)))

    # Display DESC field in vcf header section where each entry describes the INFO field set of annotation field names
    for name, desc in zip(fieldNames,fieldDescs):
        print("""##DESC=<ID={0},Number=1,Type=String,Description="{1}">""".format(name, desc))
    
    # Print main data header row
    print(dataHeader, end="")

    for key, rows in data.iteritems():
        chrom, pos, ref, alt = key
        idStr = rows[0][2]
        infoParts = []
        for row in rows:
            # parse the old info field
            infoData = {}
            for fieldStr in row[-1].split(";"):
                fieldName, val = string.split(fieldStr, "=", 1)
                infoData[fieldName] = val

            descFields = []
            for fn in fieldNames:
                descFields.append(infoData.get(fn, ""))

            descFields = [d.replace("|", "_").strip('"').lstrip("-") for d in descFields]
            infoParts.append("|".join(descFields))
        infoParts = [i.replace(",", ".").strip('"') for i in infoParts]
        newInfo = "AC=%d;Desc=%s" % (len(infoParts), ",".join(infoParts))
        newRow = (chrom, pos, idStr, ref, alt, ".", ".", newInfo)
        print("\t".join(newRow))

if __name__ == "__main__":
    sys.exit(main(sys.argv))

