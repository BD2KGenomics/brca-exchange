# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-10 16:52
from __future__ import unicode_literals

import csv
import os.path

from django.conf import settings
from django.db import migrations

from data.models import Variant, DataRelease, ChangeType
import json

#############################################################
# NOTE: This migration has been disabled as it precludes    #
# future changes to models (e.g. changing the variant model #
# in a future migration will cause this migration to fail). #
#############################################################


# def load_from_tsv(apps, schema_editor):
#     # This loads in the version 1 data release from 10/6/2016,
#     # all subsequent releases currently require manual use
#     # of addrelease.py
#     data_path = os.path.join(settings.BASE_DIR, 'data', 'resources', 'releases',
#                              'release-10-06-16', 'built_with_change_types.tsv')
#     notes_path = os.path.join(settings.BASE_DIR, 'data', 'resources', 'releases',
#                               'release-10-06-16', 'version.json')

#     with open(notes_path) as version_data:
#         notes = json.load(version_data)

#     with open(data_path) as tsv_file:
#         reader = csv.reader(tsv_file, dialect="excel-tab")
#         header = reader.next()

#         notes['sources'] = ', '.join(notes['sources'])
#         release_id = DataRelease.objects.create(**notes).id
#         change_types = {ct['name']: ct['id'] for ct in ChangeType.objects.values()}

#         for row in reader:
#             # split Source column into booleans
#             row_dict = dict(zip(header, row))
#             if 'change_type' in row_dict and row_dict['change_type']:
#                 for source in row_dict['Source'].split(','):
#                     row_dict['Variant_in_' + source] = True
#                 row_dict['Data_Release_id'] = release_id
#                 row_dict['Change_Type_id'] = change_types[row_dict.pop('change_type')]
#                 # use cleaned up genomic coordinates
#                 row_dict['Genomic_Coordinate_hg38'] = row_dict.pop('pyhgvs_Genomic_Coordinate_38')
#                 row_dict['Genomic_Coordinate_hg37'] = row_dict.pop('pyhgvs_Genomic_Coordinate_37')
#                 row_dict['Genomic_Coordinate_hg36'] = row_dict.pop('pyhgvs_Genomic_Coordinate_36')
#                 row_dict['Hg37_Start'] = row_dict.pop('pyhgvs_Hg37_Start')
#                 row_dict['Hg37_End'] = row_dict.pop('pyhgvs_Hg37_End')
#                 row_dict['Hg36_Start'] = row_dict.pop('pyhgvs_Hg36_Start')
#                 row_dict['Hg36_End'] = row_dict.pop('pyhgvs_Hg36_End')
#                 row_dict['HGVS_cDNA'] = row_dict.pop('pyhgvs_cDNA')
#                 row_dict['HGVS_Protein'] = row_dict.pop('pyhgvs_Protein')

#                 Variant.objects.create_variant(row_dict)


class Migration(migrations.Migration):
    dependencies = [
        ('data', '0002_search_index'),
    ]

    operations = [
        migrations.RunSQL("DELETE FROM variant;"),
        # migrations.RunPython(load_from_tsv)
    ]
