{
  "swagger": "2.0",
  "info": {
    "title": "GA4GH BRCA Exchange",
    "version": "0.1",
    "description": "meow"
  },
  "host": "brcaexchange.org",
  "basePath": "backend/data/ga4gh"
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/callsets/search": {
      "post": {
        "summary": "Gets a list of call sets matching the search criteria.",
        "description": "`POST /callsets/search` must accept a JSON version of\n`SearchCallSetsRequest` as the post body and will return a JSON version of\n`SearchCallSetsResponse`.",
        "operationId": "SearchCallSets",
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/ga4ghSearchCallSetsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ga4ghSearchCallSetsRequest"
            }
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    },
    "/callsets/{call_set_id}": {
      "get": {
        "summary": "Gets a `CallSet` by ID.",
        "description": "`GET /callsets/{id}` will return a JSON version of `CallSet`.",
        "operationId": "GetCallSet",
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/ga4ghCallSet"
            }
          }
        },
        "parameters": [
          {
            "name": "call_set_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    },
    "/datasets/search": {
      "post": {
        "summary": "Gets a list of `Dataset` matching the search criteria.",
        "description": "`POST /datasets/search` must accept a JSON version of\n`SearchDatasetsRequest` as the post body and will return a JSON\nversion of `SearchDatasetsResponse`.",
        "operationId": "SearchDatasets",
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/ga4ghSearchDatasetsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ga4ghSearchDatasetsRequest"
            }
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/datasets/{dataset_id}": {
      "get": {
        "summary": "Gets a `Dataset` by ID.",
        "description": "`GET /datasets/{dataset_id}` will return a JSON version of\n`Dataset`.",
        "operationId": "GetDataset",
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/ga4ghDataset"
            }
          }
        },
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/variants/search": {
      "post": {
        "summary": "Gets a list of `Variant` matching the search criteria.",
        "description": "`POST /variants/search` must accept a JSON version of\n`SearchVariantsRequest` as the post body and will return a JSON version of\n`SearchVariantsResponse`.",
        "operationId": "SearchVariants",
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/ga4ghSearchVariantsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ga4ghSearchVariantsRequest"
            }
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    },
    "/variants/{variant_id}": {
      "post": {
        "summary": "Gets a `Variant` by ID.",
        "description": "`GET /variants/{id}` will return a JSON version of `Variant`.",
        "operationId": "GetVariant",
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/ga4ghVariant"
            }
          }
        },
        "parameters": [
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    },
    "/variantsets/search": {
      "post": {
        "summary": "Gets a list of `VariantSet` matching the search criteria.",
        "description": "`POST /variantsets/search` must accept a JSON version of\n`SearchVariantSetsRequest` as the post body and will return a JSON version\nof `SearchVariantSetsResponse`.",
        "operationId": "SearchVariantSets",
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/ga4ghSearchVariantSetsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ga4ghSearchVariantSetsRequest"
            }
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    },
    "/variantsets/{variant_set_id}": {
      "get": {
        "summary": "Gets a `VariantSet` by ID.",
        "description": "`GET /variantsets/{variant_set_id}` will return a JSON version of\n`VariantSet`.",
        "operationId": "GetVariantSet",
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/ga4ghVariantSet"
            }
          }
        },
        "parameters": [
          {
            "name": "variant_set_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    }
  },
  "definitions": {
    "ga4ghCall": {
      "type": "object",
      "properties": {
        "call_set_id": {
          "type": "string",
          "format": "string",
          "description": "The ID of the call set this variant call belongs to.\n\nIf this field is not present, the ordering of the call sets from a\n`SearchCallSetsRequest` over this `VariantSet` is guaranteed to match\nthe ordering of the calls on this `Variant`.\nThe number of results will also be the same."
        },
        "call_set_name": {
          "type": "string",
          "format": "string",
          "description": "The name of the call set this variant call belongs to.\nIf this field is not present, the ordering of the call sets from a\n`SearchCallSetsRequest` over this `VariantSet` is guaranteed to match\nthe ordering of the calls on this `Variant`.\nThe number of results will also be the same."
        },
        "genotype": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "The genotype of this variant call.\n\nA 0 value represents the reference allele of the associated `Variant`. Any\nother value is a 1-based index into the alternate alleles of the associated\n`Variant`.\n\nIf a variant had a referenceBases field of \"T\", an alternateBases\nvalue of [\"A\", \"C\"], and the genotype was [2, 1], that would mean the call\nrepresented the heterozygous value \"CA\" for this variant. If the genotype\nwas instead [0, 1] the represented value would be \"TA\". Ordering of the\ngenotype values is important if the phaseset field is present."
        },
        "genotype_likelihood": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          },
          "description": "The genotype likelihoods for this variant call. Each array entry\nrepresents how likely a specific genotype is for this call as\nlog10(P(data | genotype)), analogous to the GL tag in the VCF spec. The\nvalue ordering is defined by the GL tag in the VCF spec."
        },
        "info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufListValue"
          },
          "description": "A map of additional variant call information."
        },
        "phaseset": {
          "type": "string",
          "format": "string",
          "description": "If this field is populated, this variant call's genotype ordering implies\nthe phase of the bases and is consistent with any other variant calls on\nthe same contig which have the same phaseset string."
        }
      },
      "description": "A `Call` represents the determination of genotype with respect to a\nparticular `Variant`.\n\nIt may include associated information such as quality\nand phasing. For example, a call might assign a probability of 0.32 to\nthe occurrence of a SNP named rs1234 in a call set with the name NA12345."
    },
    "ga4ghCallSet": {
      "type": "object",
      "properties": {
        "bio_sample_id": {
          "type": "string",
          "format": "string",
          "description": "The BioSample the call set data was generated from."
        },
        "created": {
          "type": "string",
          "format": "int64",
          "description": "The date this call set was created in milliseconds from the epoch."
        },
        "id": {
          "type": "string",
          "format": "string",
          "description": "The call set ID."
        },
        "info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufListValue"
          },
          "description": "A map of additional call set information."
        },
        "name": {
          "type": "string",
          "format": "string",
          "description": "The call set name."
        },
        "updated": {
          "type": "string",
          "format": "int64",
          "description": "The time at which this call set was last updated in\nmilliseconds from the epoch."
        },
        "variant_set_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          },
          "description": "The IDs of the variant sets this call set has calls in."
        }
      },
      "description": "A CallSet is a collection of calls that were generated by the same analysis\nof the same sample."
    },
    "ga4ghDataset": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "format": "string",
          "description": "Additional, human-readable information on the dataset."
        },
        "id": {
          "type": "string",
          "format": "string",
          "description": "The dataset's id, locally unique to the server instance."
        },
        "info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufListValue"
          },
          "description": "A map of additional dataset information."
        },
        "name": {
          "type": "string",
          "format": "string",
          "description": "The name of the dataset."
        }
      },
      "description": "A Dataset is a collection of related data of multiple types.\nData providers decide how to group data into datasets.\nSee [Metadata API](../api/metadata.html) for a more detailed discussion."
    },
    "ga4ghGetCallSetRequest": {
      "type": "object",
      "properties": {
        "call_set_id": {
          "type": "string",
          "format": "string",
          "description": "The ID of the `CallSet` to be retrieved."
        }
      },
      "description": "This request maps to the URL `GET /callsets/{call_set_id}`."
    },
    "ga4ghGetDatasetRequest": {
      "type": "object",
      "properties": {
        "dataset_id": {
          "type": "string",
          "format": "string",
          "description": "The ID of the `Dataset` to be retrieved."
        }
      },
      "description": "This request maps to the URL `GET /datasets/{dataset_id}`."
    },
    "ga4ghGetVariantRequest": {
      "type": "object",
      "properties": {
        "variant_id": {
          "type": "string",
          "format": "string",
          "description": "The ID of the `Variant` to be retrieved."
        }
      },
      "description": "This request maps to the URL `GET /variants/{id}`."
    },
    "ga4ghGetVariantSetRequest": {
      "type": "object",
      "properties": {
        "variant_set_id": {
          "type": "string",
          "format": "string",
          "description": "The ID of the `VariantSet` to be retrieved."
        }
      },
      "description": "This request maps to the URL `GET /variantsets/{id}`."
    },
    "ga4ghSearchCallSetsRequest": {
      "type": "object",
      "properties": {
        "bio_sample_id": {
          "type": "string",
          "format": "string",
          "description": "Return only call sets generated from the provided BioSample ID."
        },
        "name": {
          "type": "string",
          "format": "string",
          "description": "Only return call sets with this name (case-sensitive, exact match)."
        },
        "page_size": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the maximum number of results to return in a single page.\nIf unspecified, a system default will be used."
        },
        "page_token": {
          "type": "string",
          "format": "string",
          "description": "The continuation token, which is used to page through large result sets.\nTo get the next page of results, set this parameter to the value of\n`next_page_token` from the previous response."
        },
        "variant_set_id": {
          "type": "string",
          "format": "string",
          "description": "The VariantSet to search."
        }
      },
      "description": "******************  /callsets  *********************\nThis request maps to the body of `POST /callsets/search` as JSON."
    },
    "ga4ghSearchCallSetsResponse": {
      "type": "object",
      "properties": {
        "call_sets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghCallSet"
          },
          "description": "The list of matching call sets."
        },
        "next_page_token": {
          "type": "string",
          "format": "string",
          "description": "The continuation token, which is used to page through large result sets.\nProvide this value in a subsequent request to return the next page of\nresults. This field will be empty if there aren't any additional results."
        }
      },
      "description": "This is the response from `POST /callsets/search` expressed as JSON."
    },
    "ga4ghSearchDatasetsRequest": {
      "type": "object",
      "properties": {
        "page_size": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the maximum number of results to return in a single page.\nIf unspecified, a system default will be used."
        },
        "page_token": {
          "type": "string",
          "format": "string",
          "description": "The continuation token, which is used to page through large result sets.\nTo get the next page of results, set this parameter to the value of\n`next_page_token` from the previous response."
        }
      },
      "description": "This request maps to the body of `POST /datasets/search` as JSON."
    },
    "ga4ghSearchDatasetsResponse": {
      "type": "object",
      "properties": {
        "datasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghDataset"
          },
          "description": "The list of datasets."
        },
        "next_page_token": {
          "type": "string",
          "format": "string",
          "description": "The continuation token, which is used to page through large result sets.\nProvide this value in a subsequent request to return the next page of\nresults. This field will be empty if there aren't any additional results."
        }
      },
      "description": "This is the response from `POST /datasets/search` expressed as JSON."
    },
    "ga4ghSearchVariantSetsRequest": {
      "type": "object",
      "properties": {
        "dataset_id": {
          "type": "string",
          "format": "string",
          "description": "The `Dataset` to search."
        },
        "page_size": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the maximum number of results to return in a single page.\nIf unspecified, a system default will be used."
        },
        "page_token": {
          "type": "string",
          "format": "string",
          "description": "The continuation token, which is used to page through large result sets. To\nget the next page of results, set this parameter to the value of\n`next_page_token` from the previous response."
        }
      },
      "description": "******************  /variantsets  *********************\nThis request maps to the body of `POST /variantsets/search` as JSON."
    },
    "ga4ghSearchVariantSetsResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string",
          "format": "string",
          "description": "The continuation token, which is used to page through large result sets.\nProvide this value in a subsequent request to return the next page of\nresults. This field will be empty if there aren't any additional results."
        },
        "variant_sets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghVariantSet"
          },
          "description": "The list of matching variant sets."
        }
      },
      "description": "This is the response from `POST /variantsets/search` expressed as JSON."
    },
    "ga4ghSearchVariantsRequest": {
      "type": "object",
      "properties": {
        "call_set_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          },
          "description": "Only return variant calls which belong to call sets with these IDs.\nIf unspecified, return all variants and no variant call objects."
        },
        "end": {
          "type": "string",
          "format": "int64",
          "description": "Required. The end of the window (0-based, exclusive) for which overlapping\nvariants should be returned."
        },
        "page_size": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the maximum number of results to return in a single page.\nIf unspecified, a system default will be used."
        },
        "page_token": {
          "type": "string",
          "format": "string",
          "description": "The continuation token, which is used to page through large result sets.\nTo get the next page of results, set this parameter to the value of\n`next_page_token` from the previous response."
        },
        "reference_name": {
          "type": "string",
          "format": "string",
          "description": "Required. Only return variants on this reference."
        },
        "start": {
          "type": "string",
          "format": "int64",
          "description": "Required. The beginning of the window (0-based, inclusive) for\nwhich overlapping variants should be returned.\nGenomic positions are non-negative integers less than reference length.\nRequests spanning the join of circular genomes are represented as\ntwo requests one on each side of the join (position 0)."
        },
        "variant_set_id": {
          "type": "string",
          "format": "string",
          "description": "The `VariantSet` to search."
        }
      },
      "description": "******************  /variants  *********************\nThis request maps to the body of `POST /variants/search` as JSON."
    },
    "ga4ghSearchVariantsResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string",
          "format": "string",
          "description": "The continuation token, which is used to page through large result sets.\nProvide this value in a subsequent request to return the next page of\nresults. This field will be empty if there aren't any additional results."
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghVariant"
          },
          "description": "The list of matching variants.\nIf the `callSetId` field on the returned calls is not present,\nthe ordering of the call sets from a `SearchCallSetsRequest`\nover the parent `VariantSet` is guaranteed to match the ordering\nof the calls on each `Variant`. The number of results will also be\nthe same."
        }
      },
      "description": "This is the response from `POST /variants/search` expressed as JSON."
    },
    "ga4ghVariant": {
      "type": "object",
      "properties": {
        "alternate_bases": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          },
          "description": "The bases that appear instead of the reference bases. Multiple alternate\nalleles are possible."
        },
        "calls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghCall"
          },
          "description": "The variant calls for this particular variant. Each one represents the\ndetermination of genotype with respect to this variant. `Call`s in this\narray are implicitly associated with this `Variant`."
        },
        "created": {
          "type": "string",
          "format": "int64",
          "description": "The date this variant was created in milliseconds from the epoch."
        },
        "end": {
          "type": "string",
          "format": "int64",
          "description": "The end position (exclusive), resulting in [start, end) closed-open\ninterval.\nThis is typically calculated by `start + referenceBases.length`."
        },
        "id": {
          "type": "string",
          "format": "string",
          "description": "The variant ID."
        },
        "info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufListValue"
          },
          "description": "A map of additional variant information."
        },
        "names": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          },
          "description": "Names for the variant, for example a RefSNP ID."
        },
        "reference_bases": {
          "type": "string",
          "format": "string",
          "description": "The reference bases for this variant. They start at the given start\nposition."
        },
        "reference_name": {
          "type": "string",
          "format": "string",
          "title": "The reference on which this variant occurs.\n(e.g. `chr20` or `X`)"
        },
        "start": {
          "type": "string",
          "format": "int64",
          "description": "The start position at which this variant occurs (0-based).\nThis corresponds to the first base of the string of reference bases.\nGenomic positions are non-negative integers less than reference length.\nVariants spanning the join of circular genomes are represented as\ntwo variants one on each side of the join (position 0)."
        },
        "updated": {
          "type": "string",
          "format": "int64",
          "description": "The time at which this variant was last updated in\nmilliseconds from the epoch."
        },
        "variant_set_id": {
          "type": "string",
          "format": "string",
          "description": "The ID of the `VariantSet` this variant belongs to. This transitively\ndefines\nthe `ReferenceSet` against which the `Variant` is to be interpreted."
        }
      },
      "description": "A `Variant` represents a change in DNA sequence relative to some reference.\nFor example, a variant could represent a SNP or an insertion.\nVariants belong to a `VariantSet`.\nThis is equivalent to a row in VCF."
    },
    "ga4ghVariantSet": {
      "type": "object",
      "properties": {
        "dataset_id": {
          "type": "string",
          "format": "string",
          "description": "The ID of the dataset this variant set belongs to."
        },
        "id": {
          "type": "string",
          "format": "string",
          "description": "The variant set ID."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghVariantSetMetadata"
          },
          "description": "Optional metadata associated with this variant set.\nThis array can be used to store information about the variant set, such as\ninformation found in VCF header fields, that isn't already available in\nfirst class fields such as \"name\"."
        },
        "name": {
          "type": "string",
          "format": "string",
          "description": "The variant set name."
        },
        "reference_set_id": {
          "type": "string",
          "format": "string",
          "description": "The ID of the reference set that describes the sequences used by the\nvariants in this set."
        }
      },
      "description": "A VariantSet is a collection of variants and variant calls intended to be\nanalyzed together."
    },
    "ga4ghVariantSetMetadata": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "format": "string",
          "description": "A textual description of this metadata."
        },
        "id": {
          "type": "string",
          "format": "string",
          "title": "User-provided ID field, not enforced by this API.\nTwo or more pieces of structured metadata with identical\nid and key fields are considered equivalent.\nFIXME: If it's not enforced, then why can't it be null?"
        },
        "info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufListValue"
          },
          "description": "Remaining structured metadata key-value pairs."
        },
        "key": {
          "type": "string",
          "format": "string",
          "description": "The top-level key."
        },
        "number": {
          "type": "string",
          "format": "string",
          "description": "The number of values that can be included in a field described by this\nmetadata."
        },
        "type": {
          "type": "string",
          "format": "string",
          "description": "The type of data."
        },
        "value": {
          "type": "string",
          "format": "string",
          "description": "The value field for simple metadata."
        }
      },
      "description": "This metadata represents VCF header information."
    },
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        },
        "null_value": {
          "$ref": "#/definitions/protobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "format": "string",
          "description": "Represents a string value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    }
  }
}
